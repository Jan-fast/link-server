!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEBUG	log.h	/^        DEBUG = 1,$/;"	e	enum:slyar::LogLevel::Level
DataTimeFormatItem	log.cc	/^    DataTimeFormatItem(const std::string& format = "%Y-%m-%d %H:%M:%S") $/;"	f	class:sylar::DataTimeFormatItem	access:public	signature:(const std::string& format = Ó)
DataTimeFormatItem	log.cc	/^class DataTimeFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
ERROR	log.h	/^        ERROR = 4,$/;"	e	enum:slyar::LogLevel::Level
ElapseFormatItem	log.cc	/^    ElapseFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::ElapseFormatItem	access:public	signature:(const std::string& str = Ó)
ElapseFormatItem	log.cc	/^class ElapseFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
FATAL	log.h	/^        FATAL = 5$/;"	e	enum:slyar::LogLevel::Level
FiberIdFormatItem	log.cc	/^    FiberIdFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::FiberIdFormatItem	access:public	signature:(const std::string& str = Ó)
FiberIdFormatItem	log.cc	/^class FiberIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
FileLogAppender	log.h	/^    FileLogAppender(const std::string& filename);$/;"	p	class:slyar::FileLogAppender	access:public	signature:(const std::string& filename)
FileLogAppender	log.h	/^class FileLogAppender : public LogAppender {$/;"	c	namespace:slyar	inherits:LogAppender
FilenameFormatItem	log.cc	/^    FilenameFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::FilenameFormatItem	access:public	signature:(const std::string& str = Ó)
FilenameFormatItem	log.cc	/^class FilenameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
FormatItem	log.h	/^    class FormatItem {$/;"	c	class:slyar::LogFormatter	access:public
FromString	log.cc	/^LogLevel::Level LogLevel::FromString(const std::string& str) {$/;"	f	class:sylar::LogLevel	signature:(const std::string& str)
FromString	log.h	/^    static LogLevel::Level FromString(const std::string& str);$/;"	p	class:slyar::LogLevel	access:public	signature:(const std::string& str)
INFO	log.h	/^        INFO = 2,$/;"	e	enum:slyar::LogLevel::Level
LOG_H	log.h	2;"	d
Level	log.h	/^    enum Level {$/;"	g	class:slyar::LogLevel	access:public
LevelFormatItem	log.cc	/^    LevelFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::LevelFormatItem	access:public	signature:(const std::string& str = Ó)
LevelFormatItem	log.cc	/^class LevelFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
LineFormatItem	log.cc	/^    LineFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::LineFormatItem	access:public	signature:(const std::string& str = Ó)
LineFormatItem	log.cc	/^class LineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
LogAppender	log.h	/^class LogAppender {$/;"	c	namespace:slyar
LogEvent	log.cc	/^LogEvent::LogEvent(std::shared_ptr<LogEvent> logger, LogLevel::Level level$/;"	f	class:sylar::LogEvent	signature:(std::shared_ptr<LogEvent> logger, LogLevel::Level level , const char* file, int32_t line, uint32_t elapse , uint32_t thread_id, uint32_t fiber_id, uint64_t time , const std::string& thread_name)
LogEvent	log.h	/^    LogEvent(std::shared_ptr<LogEvent> logger, LogLevel::Level level$/;"	p	class:slyar::LogEvent	access:public	signature:(std::shared_ptr<LogEvent> logger, LogLevel::Level level , const char* file, int32_t line, uint32_t elapse , uint32_t thread_id, uint32_t fiber_id, uint64_t time , const std::string& thread_name)
LogEvent	log.h	/^class LogEvent{$/;"	c	namespace:slyar
LogEventWrap	log.cc	/^LogEventWrap::LogEventWrap(LogEvent::ptr e) $/;"	f	class:sylar::LogEventWrap	signature:(LogEvent::ptr e)
LogEventWrap	log.h	/^    LogEventWrap(LogEvent::ptr e);$/;"	p	class:slyar::LogEventWrap	access:public	signature:(LogEvent::ptr e)
LogEventWrap	log.h	/^class LogEventWrap {$/;"	c	namespace:slyar
LogFormatter	log.cc	/^LogFormatter::LogFormatter(const std::string& pattern)$/;"	f	class:sylar::LogFormatter	signature:(const std::string& pattern)
LogFormatter	log.h	/^    LogFormatter(const std::string& pattern);$/;"	p	class:slyar::LogFormatter	access:public	signature:(const std::string& pattern)
LogFormatter	log.h	/^class LogFormatter {$/;"	c	namespace:slyar
LogLevel	log.h	/^class LogLevel {$/;"	c	namespace:slyar
Logger	log.cc	/^Logger(const std::string& name = "root")$/;"	f	namespace:sylar	signature:(const std::string& name = Ó)
Logger	log.h	/^    Logger(const std::string& name = "root");$/;"	p	class:slyar::Logger	access:public	signature:(const std::string& name = Ó)
Logger	log.h	/^class Logger {$/;"	c	namespace:slyar
MessageFormatItem	log.cc	/^    MessageFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::MessageFormatItem	access:public	signature:(const std::string& str = Ó)
MessageFormatItem	log.cc	/^class MessageFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
NameFormatItem	log.cc	/^    NameFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::NameFormatItem	access:public	signature:(const std::string& str = Ó)
NameFormatItem	log.cc	/^class NameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem
NewLineFormatItem	log.cc	/^    NewLineFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::NewLineFormatItem	access:public	signature:(const std::string& str = Ó)
NewLineFormatItem	log.cc	/^class NewLineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
StdoutLogAppender	log.h	/^class StdoutLogAppender : public LogAppender {$/;"	c	namespace:slyar	inherits:LogAppender
StringFormatItem	log.cc	/^    StringFormatItem(const std::string& str) $/;"	f	class:sylar::StringFormatItem	access:public	signature:(const std::string& str)
StringFormatItem	log.cc	/^class StringFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
TabFormatItem	log.cc	/^    TabFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::TabFormatItem	access:public	signature:(const std::string& str = Ó)
TabFormatItem	log.cc	/^class TabFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
ThreadIdFormatItem	log.cc	/^    ThreadIdFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::ThreadIdFormatItem	access:public	signature:(const std::string& str = Ó)
ThreadIdFormatItem	log.cc	/^class ThreadIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
ThreadNameFormatItem	log.cc	/^    ThreadNameFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::ThreadNameFormatItem	access:public	signature:(const std::string& str = Ó)
ThreadNameFormatItem	log.cc	/^class ThreadNameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
ToString	log.cc	/^const char * LogLevel::ToString(LogLevel::level level) {$/;"	f	class:sylar::LogLevel	signature:(LogLevel::level level)
ToString	log.h	/^    static const char * ToString(LogLevel::Level level);$/;"	p	class:slyar::LogLevel	access:public	signature:(LogLevel::Level level)
UNKNOW	log.h	/^        UNKNOW = 0,$/;"	e	enum:slyar::LogLevel::Level
WARN	log.h	/^        WARN = 3,$/;"	e	enum:slyar::LogLevel::Level
XX	log.cc	12;"	d	file:
XX	log.cc	22;"	d	file:
XX	log.cc	31;"	d	file:
XX	log.cc	328;"	d	file:
XX	log.cc	343;"	d	file:
XX	log.cc	42;"	d	file:
addAppender	log.cc	/^void Logger::addAppender(LogAppender::ptr appender) {$/;"	f	class:sylar::Logger	signature:(LogAppender::ptr appender)
addAppender	log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:slyar::Logger	access:public	signature:(LogAppender::ptr appender)
clearAppenders	log.cc	/^void Logger:clearAppenders() {$/;"	f	namespace:sylar	signature:()
clearAppenders	log.h	/^    void clearAppenders();$/;"	p	class:slyar::Logger	access:public	signature:()
debug	log.cc	/^void Logger::debug(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	signature:(LogEvent::ptr event)
debug	log.h	/^    void debug(LogEvent::ptr event);$/;"	p	class:slyar::Logger	access:public	signature:(LogEvent::ptr event)
delAppender	log.cc	/^void Logger::delAppender(LogAppender::ptr appender) {$/;"	f	class:sylar::Logger	signature:(LogAppender::ptr appender)
delAppender	log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:slyar::Logger	access:public	signature:(LogAppender::ptr appender)
error	log.cc	/^void Logger::error(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	signature:(LogEvent::ptr event)
error	log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:slyar::Logger	access:public	signature:(LogEvent::ptr event)
fatal	log.cc	/^void Logger::fatal(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	signature:(LogEvent::ptr event)
fatal	log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:slyar::Logger	access:public	signature:(LogEvent::ptr event)
format	log.cc	/^std::ostream LogFormatter::format(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:sylar::LogFormatter	signature:(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
format	log.cc	/^std::string LogFormatter::format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:sylar::LogFormatter	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
format	log.h	/^        virtual void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event) = 0;$/;"	p	class:slyar::LogFormatter::FormatItem	access:public	implementation:pure virtual	signature:(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
format	log.h	/^    std::ostream& format(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:slyar::LogFormatter	access:public	signature:(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
format	log.h	/^    std::string format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:slyar::LogFormatter	access:public	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
getContent	log.h	/^    std::string getContent() const { return m_ss.str(); }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
getElapse	log.h	/^    uint32_t getElapse() const { return m_elapse; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
getEvent	log.h	/^    LogEvent::ptr getEvent() const { return m_event; }$/;"	f	class:slyar::LogEventWrap	access:public	signature:() const
getFiberId	log.h	/^    uint32_t getFiberId() const { return m_fiberId; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
getFile	log.h	/^    const char* getFile() const { return m_file; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
getFormatter	log.h	/^    LogFormatter::ptr getFormatter();$/;"	p	class:slyar::LogAppender	access:public	signature:()
getFormatter	log.h	/^    LogFormatter::ptr getFormatter();$/;"	p	class:slyar::Logger	access:public	signature:()
getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level; }$/;"	f	class:slyar::LogAppender	access:public	signature:() const
getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
getLevel	log.h	/^    LogLevel::Level getLevel() const {return m_level;}$/;"	f	class:slyar::Logger	access:public	signature:() const
getLine	log.h	/^    int32_t getLine() const { return m_line; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
getLogger	log.h	/^    std::shared_ptr<Logger> getLogger() const { return m_logger; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
getName	log.h	/^    const std::string& getName() const {return m_name;}$/;"	f	class:slyar::Logger	access:public	signature:() const
getPattern	log.h	/^    const std::string getPattern() const { return m_pattern; }$/;"	f	class:slyar::LogFormatter	access:public	signature:() const
getSS	log.h	/^    std::stringstream& getSS() { return m_ss; }$/;"	f	class:slyar::LogEvent	access:public	signature:()
getSS	log.h	/^    std::stringstream& getSS();$/;"	p	class:slyar::LogEventWrap	access:public	signature:()
getThreadId	log.h	/^    uint32_t getThreadId() const { return m_threadId; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
getThreadName	log.h	/^    const std::string& getThreadName() const { return m_threadName; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
getTime	log.h	/^    uint64_t getTime() const { return m_time; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
info	log.cc	/^void Logger::info(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	signature:(LogEvent::ptr event)
info	log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:slyar::Logger	access:public	signature:(LogEvent::ptr event)
init	log.cc	/^void LogFormatter::init() {$/;"	f	class:sylar::LogFormatter	signature:()
init	log.h	/^    void init();$/;"	p	class:slyar::LogFormatter	access:public	signature:()
isError	log.h	/^    bool isError() const { return m_error; }$/;"	f	class:slyar::LogFormatter	access:public	signature:() const
log	log.cc	/^void Logger::log(LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:sylar::Logger	signature:(LogLevel::Level level, LogEvent::ptr event)
log	log.h	/^    virtual void log(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event) = 0;$/;"	p	class:slyar::LogAppender	access:public	implementation:pure virtual	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
log	log.h	/^    void log(LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:slyar::Logger	access:public	signature:(LogLevel::Level level, LogEvent::ptr event)
m_appenders	log.h	/^    std::list<LogAppender::ptr> m_appenders;$/;"	m	class:slyar::Logger	access:private
m_error	log.h	/^    bool m_error = false;$/;"	m	class:slyar::LogFormatter	access:private
m_event	log.h	/^    LogEvent::ptr m_event;$/;"	m	class:slyar::LogEventWrap	access:private
m_filestream	log.h	/^    std::ofstream m_filestream;$/;"	m	class:slyar::FileLogAppender	access:private
m_format	log.cc	/^    std::string m_format;$/;"	m	class:sylar::DataTimeFormatItem	file:	access:private
m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:slyar::LogAppender	access:private
m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:slyar::Logger	access:private
m_hasFormatter	log.h	/^    bool m_hasFormatter = false;$/;"	m	class:slyar::LogAppender	access:private
m_items	log.h	/^    std::vector<FormatItem::ptr> m_items;$/;"	m	class:slyar::LogFormatter	access:private
m_level	log.h	/^    LogLevel::Level m_level = LogLevel::DEBUG;$/;"	m	class:slyar::LogAppender	access:private
m_level	log.h	/^    LogLevel::Level m_level; $/;"	m	class:slyar::Logger	access:private
m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:slyar::LogEvent	access:private
m_logger	log.h	/^    std::shared_ptr<Logger> m_logger;$/;"	m	class:slyar::LogEvent	access:private
m_name	log.h	/^    std::string m_name;$/;"	m	class:slyar::FileLogAppender	access:private
m_name	log.h	/^    std::string m_name;$/;"	m	class:slyar::Logger	access:private
m_pattern	log.h	/^    std::string m_pattern;$/;"	m	class:slyar::LogFormatter	access:private
m_root	log.h	/^    Logger::ptr m_root;$/;"	m	class:slyar::Logger	access:private
m_ss	log.h	/^    std::stringstream m_ss;$/;"	m	class:slyar::LogEvent	access:private
m_str	log.cc	/^    std::string m_str;$/;"	m	class:sylar::StringFormatItem	file:	access:private
m_threadName	log.h	/^    const std::string m_threadName;$/;"	m	class:slyar::LogEvent	access:private
override	log.h	/^    void log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:slyar::FileLogAppender	access:public
override	log.h	/^    void log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:slyar::StdoutLogAppender	access:public
ptr	log.h	/^        typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:slyar::LogFormatter::FormatItem	access:public
ptr	log.h	/^    typedef std::shared_ptr<FileLogAppender> ptr;    $/;"	t	class:slyar::FileLogAppender	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:slyar::LogAppender	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:slyar::LogEvent	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:slyar::LogFormatter	access:public
ptr	log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:slyar::Logger	access:public
ptr	log.h	/^    typedef std::shared_ptr<StdoutLogAppender> ptr;$/;"	t	class:slyar::StdoutLogAppender	access:public
setFormatter	log.h	/^    void setFormatter(LogFormatter::ptr val);$/;"	p	class:slyar::LogAppender	access:public	signature:(LogFormatter::ptr val)
setFormatter	log.h	/^    void setFormatter(LogFormatter::ptr val);$/;"	p	class:slyar::Logger	access:public	signature:(LogFormatter::ptr val)
setFormatter	log.h	/^    void setFormatter(const std::string& val);$/;"	p	class:slyar::Logger	access:public	signature:(const std::string& val)
setLevel	log.h	/^    void setLevel(LogLevel::Level level) { m_level = level; }$/;"	f	class:slyar::LogAppender	access:public	signature:(LogLevel::Level level)
setLevel	log.h	/^    void setLevel(LogLevel::Level val) {m_level = val;}$/;"	f	class:slyar::Logger	access:public	signature:(LogLevel::Level val)
slyar	log.h	/^namespace slyar {$/;"	n
slyar::FileLogAppender	log.h	/^class FileLogAppender : public LogAppender {$/;"	c	namespace:slyar	inherits:LogAppender
slyar::FileLogAppender::FileLogAppender	log.h	/^    FileLogAppender(const std::string& filename);$/;"	p	class:slyar::FileLogAppender	access:public	signature:(const std::string& filename)
slyar::FileLogAppender::m_filestream	log.h	/^    std::ofstream m_filestream;$/;"	m	class:slyar::FileLogAppender	access:private
slyar::FileLogAppender::m_name	log.h	/^    std::string m_name;$/;"	m	class:slyar::FileLogAppender	access:private
slyar::FileLogAppender::override	log.h	/^    void log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:slyar::FileLogAppender	access:public
slyar::FileLogAppender::ptr	log.h	/^    typedef std::shared_ptr<FileLogAppender> ptr;    $/;"	t	class:slyar::FileLogAppender	access:public
slyar::LogAppender	log.h	/^class LogAppender {$/;"	c	namespace:slyar
slyar::LogAppender::getFormatter	log.h	/^    LogFormatter::ptr getFormatter();$/;"	p	class:slyar::LogAppender	access:public	signature:()
slyar::LogAppender::getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level; }$/;"	f	class:slyar::LogAppender	access:public	signature:() const
slyar::LogAppender::log	log.h	/^    virtual void log(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event) = 0;$/;"	p	class:slyar::LogAppender	access:public	implementation:pure virtual	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
slyar::LogAppender::m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:slyar::LogAppender	access:private
slyar::LogAppender::m_hasFormatter	log.h	/^    bool m_hasFormatter = false;$/;"	m	class:slyar::LogAppender	access:private
slyar::LogAppender::m_level	log.h	/^    LogLevel::Level m_level = LogLevel::DEBUG;$/;"	m	class:slyar::LogAppender	access:private
slyar::LogAppender::ptr	log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:slyar::LogAppender	access:public
slyar::LogAppender::setFormatter	log.h	/^    void setFormatter(LogFormatter::ptr val);$/;"	p	class:slyar::LogAppender	access:public	signature:(LogFormatter::ptr val)
slyar::LogAppender::setLevel	log.h	/^    void setLevel(LogLevel::Level level) { m_level = level; }$/;"	f	class:slyar::LogAppender	access:public	signature:(LogLevel::Level level)
slyar::LogAppender::~LogAppender	log.h	/^    virtual ~LogAppender() {}$/;"	f	class:slyar::LogAppender	access:public	implementation:virtual	signature:()
slyar::LogEvent	log.h	/^class LogEvent{$/;"	c	namespace:slyar
slyar::LogEvent::LogEvent	log.h	/^    LogEvent(std::shared_ptr<LogEvent> logger, LogLevel::Level level$/;"	p	class:slyar::LogEvent	access:public	signature:(std::shared_ptr<LogEvent> logger, LogLevel::Level level , const char* file, int32_t line, uint32_t elapse , uint32_t thread_id, uint32_t fiber_id, uint64_t time , const std::string& thread_name)
slyar::LogEvent::getContent	log.h	/^    std::string getContent() const { return m_ss.str(); }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
slyar::LogEvent::getElapse	log.h	/^    uint32_t getElapse() const { return m_elapse; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
slyar::LogEvent::getFiberId	log.h	/^    uint32_t getFiberId() const { return m_fiberId; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
slyar::LogEvent::getFile	log.h	/^    const char* getFile() const { return m_file; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
slyar::LogEvent::getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
slyar::LogEvent::getLine	log.h	/^    int32_t getLine() const { return m_line; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
slyar::LogEvent::getLogger	log.h	/^    std::shared_ptr<Logger> getLogger() const { return m_logger; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
slyar::LogEvent::getSS	log.h	/^    std::stringstream& getSS() { return m_ss; }$/;"	f	class:slyar::LogEvent	access:public	signature:()
slyar::LogEvent::getThreadId	log.h	/^    uint32_t getThreadId() const { return m_threadId; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
slyar::LogEvent::getThreadName	log.h	/^    const std::string& getThreadName() const { return m_threadName; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
slyar::LogEvent::getTime	log.h	/^    uint64_t getTime() const { return m_time; }$/;"	f	class:slyar::LogEvent	access:public	signature:() const
slyar::LogEvent::m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:slyar::LogEvent	access:private
slyar::LogEvent::m_logger	log.h	/^    std::shared_ptr<Logger> m_logger;$/;"	m	class:slyar::LogEvent	access:private
slyar::LogEvent::m_ss	log.h	/^    std::stringstream m_ss;$/;"	m	class:slyar::LogEvent	access:private
slyar::LogEvent::m_threadName	log.h	/^    const std::string m_threadName;$/;"	m	class:slyar::LogEvent	access:private
slyar::LogEvent::ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:slyar::LogEvent	access:public
slyar::LogEventWrap	log.h	/^class LogEventWrap {$/;"	c	namespace:slyar
slyar::LogEventWrap::LogEventWrap	log.h	/^    LogEventWrap(LogEvent::ptr e);$/;"	p	class:slyar::LogEventWrap	access:public	signature:(LogEvent::ptr e)
slyar::LogEventWrap::getEvent	log.h	/^    LogEvent::ptr getEvent() const { return m_event; }$/;"	f	class:slyar::LogEventWrap	access:public	signature:() const
slyar::LogEventWrap::getSS	log.h	/^    std::stringstream& getSS();$/;"	p	class:slyar::LogEventWrap	access:public	signature:()
slyar::LogEventWrap::m_event	log.h	/^    LogEvent::ptr m_event;$/;"	m	class:slyar::LogEventWrap	access:private
slyar::LogEventWrap::~LogEventWrap	log.h	/^    ~LogEventWrap();$/;"	p	class:slyar::LogEventWrap	access:public	signature:()
slyar::LogFormatter	log.h	/^class LogFormatter {$/;"	c	namespace:slyar
slyar::LogFormatter::FormatItem	log.h	/^    class FormatItem {$/;"	c	class:slyar::LogFormatter	access:public
slyar::LogFormatter::FormatItem::format	log.h	/^        virtual void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event) = 0;$/;"	p	class:slyar::LogFormatter::FormatItem	access:public	implementation:pure virtual	signature:(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
slyar::LogFormatter::FormatItem::ptr	log.h	/^        typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:slyar::LogFormatter::FormatItem	access:public
slyar::LogFormatter::FormatItem::~FormatItem	log.h	/^        virtual ~FormatItem() {}$/;"	f	class:slyar::LogFormatter::FormatItem	access:public	implementation:virtual	signature:()
slyar::LogFormatter::LogFormatter	log.h	/^    LogFormatter(const std::string& pattern);$/;"	p	class:slyar::LogFormatter	access:public	signature:(const std::string& pattern)
slyar::LogFormatter::format	log.h	/^    std::ostream& format(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:slyar::LogFormatter	access:public	signature:(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
slyar::LogFormatter::format	log.h	/^    std::string format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:slyar::LogFormatter	access:public	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
slyar::LogFormatter::getPattern	log.h	/^    const std::string getPattern() const { return m_pattern; }$/;"	f	class:slyar::LogFormatter	access:public	signature:() const
slyar::LogFormatter::init	log.h	/^    void init();$/;"	p	class:slyar::LogFormatter	access:public	signature:()
slyar::LogFormatter::isError	log.h	/^    bool isError() const { return m_error; }$/;"	f	class:slyar::LogFormatter	access:public	signature:() const
slyar::LogFormatter::m_error	log.h	/^    bool m_error = false;$/;"	m	class:slyar::LogFormatter	access:private
slyar::LogFormatter::m_items	log.h	/^    std::vector<FormatItem::ptr> m_items;$/;"	m	class:slyar::LogFormatter	access:private
slyar::LogFormatter::m_pattern	log.h	/^    std::string m_pattern;$/;"	m	class:slyar::LogFormatter	access:private
slyar::LogFormatter::ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:slyar::LogFormatter	access:public
slyar::LogLevel	log.h	/^class LogLevel {$/;"	c	namespace:slyar
slyar::LogLevel::DEBUG	log.h	/^        DEBUG = 1,$/;"	e	enum:slyar::LogLevel::Level
slyar::LogLevel::ERROR	log.h	/^        ERROR = 4,$/;"	e	enum:slyar::LogLevel::Level
slyar::LogLevel::FATAL	log.h	/^        FATAL = 5$/;"	e	enum:slyar::LogLevel::Level
slyar::LogLevel::FromString	log.h	/^    static LogLevel::Level FromString(const std::string& str);$/;"	p	class:slyar::LogLevel	access:public	signature:(const std::string& str)
slyar::LogLevel::INFO	log.h	/^        INFO = 2,$/;"	e	enum:slyar::LogLevel::Level
slyar::LogLevel::Level	log.h	/^    enum Level {$/;"	g	class:slyar::LogLevel	access:public
slyar::LogLevel::ToString	log.h	/^    static const char * ToString(LogLevel::Level level);$/;"	p	class:slyar::LogLevel	access:public	signature:(LogLevel::Level level)
slyar::LogLevel::UNKNOW	log.h	/^        UNKNOW = 0,$/;"	e	enum:slyar::LogLevel::Level
slyar::LogLevel::WARN	log.h	/^        WARN = 3,$/;"	e	enum:slyar::LogLevel::Level
slyar::Logger	log.h	/^class Logger {$/;"	c	namespace:slyar
slyar::Logger::Logger	log.h	/^    Logger(const std::string& name = "root");$/;"	p	class:slyar::Logger	access:public	signature:(const std::string& name = Ó)
slyar::Logger::addAppender	log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:slyar::Logger	access:public	signature:(LogAppender::ptr appender)
slyar::Logger::clearAppenders	log.h	/^    void clearAppenders();$/;"	p	class:slyar::Logger	access:public	signature:()
slyar::Logger::debug	log.h	/^    void debug(LogEvent::ptr event);$/;"	p	class:slyar::Logger	access:public	signature:(LogEvent::ptr event)
slyar::Logger::delAppender	log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:slyar::Logger	access:public	signature:(LogAppender::ptr appender)
slyar::Logger::error	log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:slyar::Logger	access:public	signature:(LogEvent::ptr event)
slyar::Logger::fatal	log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:slyar::Logger	access:public	signature:(LogEvent::ptr event)
slyar::Logger::getFormatter	log.h	/^    LogFormatter::ptr getFormatter();$/;"	p	class:slyar::Logger	access:public	signature:()
slyar::Logger::getLevel	log.h	/^    LogLevel::Level getLevel() const {return m_level;}$/;"	f	class:slyar::Logger	access:public	signature:() const
slyar::Logger::getName	log.h	/^    const std::string& getName() const {return m_name;}$/;"	f	class:slyar::Logger	access:public	signature:() const
slyar::Logger::info	log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:slyar::Logger	access:public	signature:(LogEvent::ptr event)
slyar::Logger::log	log.h	/^    void log(LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:slyar::Logger	access:public	signature:(LogLevel::Level level, LogEvent::ptr event)
slyar::Logger::m_appenders	log.h	/^    std::list<LogAppender::ptr> m_appenders;$/;"	m	class:slyar::Logger	access:private
slyar::Logger::m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:slyar::Logger	access:private
slyar::Logger::m_level	log.h	/^    LogLevel::Level m_level; $/;"	m	class:slyar::Logger	access:private
slyar::Logger::m_name	log.h	/^    std::string m_name;$/;"	m	class:slyar::Logger	access:private
slyar::Logger::m_root	log.h	/^    Logger::ptr m_root;$/;"	m	class:slyar::Logger	access:private
slyar::Logger::ptr	log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:slyar::Logger	access:public
slyar::Logger::setFormatter	log.h	/^    void setFormatter(LogFormatter::ptr val);$/;"	p	class:slyar::Logger	access:public	signature:(LogFormatter::ptr val)
slyar::Logger::setFormatter	log.h	/^    void setFormatter(const std::string& val);$/;"	p	class:slyar::Logger	access:public	signature:(const std::string& val)
slyar::Logger::setLevel	log.h	/^    void setLevel(LogLevel::Level val) {m_level = val;}$/;"	f	class:slyar::Logger	access:public	signature:(LogLevel::Level val)
slyar::Logger::warn	log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:slyar::Logger	access:public	signature:(LogEvent::ptr event)
slyar::StdoutLogAppender	log.h	/^class StdoutLogAppender : public LogAppender {$/;"	c	namespace:slyar	inherits:LogAppender
slyar::StdoutLogAppender::override	log.h	/^    void log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:slyar::StdoutLogAppender	access:public
slyar::StdoutLogAppender::ptr	log.h	/^    typedef std::shared_ptr<StdoutLogAppender> ptr;$/;"	t	class:slyar::StdoutLogAppender	access:public
sylar	log.cc	/^namespace sylar {$/;"	n	file:
sylar::DataTimeFormatItem	log.cc	/^class DataTimeFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
sylar::DataTimeFormatItem::DataTimeFormatItem	log.cc	/^    DataTimeFormatItem(const std::string& format = "%Y-%m-%d %H:%M:%S") $/;"	f	class:sylar::DataTimeFormatItem	access:public	signature:(const std::string& format = Ó)
sylar::DataTimeFormatItem::m_format	log.cc	/^    std::string m_format;$/;"	m	class:sylar::DataTimeFormatItem	file:	access:private
sylar::ElapseFormatItem	log.cc	/^class ElapseFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::ElapseFormatItem::ElapseFormatItem	log.cc	/^    ElapseFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::ElapseFormatItem	access:public	signature:(const std::string& str = Ó)
sylar::FiberIdFormatItem	log.cc	/^class FiberIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
sylar::FiberIdFormatItem::FiberIdFormatItem	log.cc	/^    FiberIdFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::FiberIdFormatItem	access:public	signature:(const std::string& str = Ó)
sylar::FilenameFormatItem	log.cc	/^class FilenameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
sylar::FilenameFormatItem::FilenameFormatItem	log.cc	/^    FilenameFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::FilenameFormatItem	access:public	signature:(const std::string& str = Ó)
sylar::LevelFormatItem	log.cc	/^class LevelFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::LevelFormatItem::LevelFormatItem	log.cc	/^    LevelFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::LevelFormatItem	access:public	signature:(const std::string& str = Ó)
sylar::LineFormatItem	log.cc	/^class LineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
sylar::LineFormatItem::LineFormatItem	log.cc	/^    LineFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::LineFormatItem	access:public	signature:(const std::string& str = Ó)
sylar::LogEvent::LogEvent	log.cc	/^LogEvent::LogEvent(std::shared_ptr<LogEvent> logger, LogLevel::Level level$/;"	f	class:sylar::LogEvent	signature:(std::shared_ptr<LogEvent> logger, LogLevel::Level level , const char* file, int32_t line, uint32_t elapse , uint32_t thread_id, uint32_t fiber_id, uint64_t time , const std::string& thread_name)
sylar::LogEventWrap::LogEventWrap	log.cc	/^LogEventWrap::LogEventWrap(LogEvent::ptr e) $/;"	f	class:sylar::LogEventWrap	signature:(LogEvent::ptr e)
sylar::LogEventWrap::~LogEventWrap	log.cc	/^LogEventWrap::~LogEventWrap() {$/;"	f	class:sylar::LogEventWrap	signature:()
sylar::LogFormatter::LogFormatter	log.cc	/^LogFormatter::LogFormatter(const std::string& pattern)$/;"	f	class:sylar::LogFormatter	signature:(const std::string& pattern)
sylar::LogFormatter::format	log.cc	/^std::ostream LogFormatter::format(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:sylar::LogFormatter	signature:(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
sylar::LogFormatter::format	log.cc	/^std::string LogFormatter::format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:sylar::LogFormatter	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
sylar::LogFormatter::init	log.cc	/^void LogFormatter::init() {$/;"	f	class:sylar::LogFormatter	signature:()
sylar::LogLevel::FromString	log.cc	/^LogLevel::Level LogLevel::FromString(const std::string& str) {$/;"	f	class:sylar::LogLevel	signature:(const std::string& str)
sylar::LogLevel::ToString	log.cc	/^const char * LogLevel::ToString(LogLevel::level level) {$/;"	f	class:sylar::LogLevel	signature:(LogLevel::level level)
sylar::Logger	log.cc	/^Logger(const std::string& name = "root")$/;"	f	namespace:sylar	signature:(const std::string& name = Ó)
sylar::Logger::addAppender	log.cc	/^void Logger::addAppender(LogAppender::ptr appender) {$/;"	f	class:sylar::Logger	signature:(LogAppender::ptr appender)
sylar::Logger::debug	log.cc	/^void Logger::debug(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	signature:(LogEvent::ptr event)
sylar::Logger::delAppender	log.cc	/^void Logger::delAppender(LogAppender::ptr appender) {$/;"	f	class:sylar::Logger	signature:(LogAppender::ptr appender)
sylar::Logger::error	log.cc	/^void Logger::error(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	signature:(LogEvent::ptr event)
sylar::Logger::fatal	log.cc	/^void Logger::fatal(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	signature:(LogEvent::ptr event)
sylar::Logger::info	log.cc	/^void Logger::info(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	signature:(LogEvent::ptr event)
sylar::Logger::log	log.cc	/^void Logger::log(LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:sylar::Logger	signature:(LogLevel::Level level, LogEvent::ptr event)
sylar::Logger::warn	log.cc	/^void Logger::warn(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	signature:(LogEvent::ptr event)
sylar::MessageFormatItem	log.cc	/^class MessageFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::MessageFormatItem::MessageFormatItem	log.cc	/^    MessageFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::MessageFormatItem	access:public	signature:(const std::string& str = Ó)
sylar::NameFormatItem	log.cc	/^class NameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem
sylar::NameFormatItem::NameFormatItem	log.cc	/^    NameFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::NameFormatItem	access:public	signature:(const std::string& str = Ó)
sylar::NewLineFormatItem	log.cc	/^class NewLineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
sylar::NewLineFormatItem::NewLineFormatItem	log.cc	/^    NewLineFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::NewLineFormatItem	access:public	signature:(const std::string& str = Ó)
sylar::StringFormatItem	log.cc	/^class StringFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
sylar::StringFormatItem::StringFormatItem	log.cc	/^    StringFormatItem(const std::string& str) $/;"	f	class:sylar::StringFormatItem	access:public	signature:(const std::string& str)
sylar::StringFormatItem::m_str	log.cc	/^    std::string m_str;$/;"	m	class:sylar::StringFormatItem	file:	access:private
sylar::TabFormatItem	log.cc	/^class TabFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
sylar::TabFormatItem::TabFormatItem	log.cc	/^    TabFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::TabFormatItem	access:public	signature:(const std::string& str = Ó)
sylar::ThreadIdFormatItem	log.cc	/^class ThreadIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
sylar::ThreadIdFormatItem::ThreadIdFormatItem	log.cc	/^    ThreadIdFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::ThreadIdFormatItem	access:public	signature:(const std::string& str = Ó)
sylar::ThreadNameFormatItem	log.cc	/^class ThreadNameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem,LogFormatter::FormatItem
sylar::ThreadNameFormatItem::ThreadNameFormatItem	log.cc	/^    ThreadNameFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::ThreadNameFormatItem	access:public	signature:(const std::string& str = Ó)
sylar::clearAppenders	log.cc	/^void Logger:clearAppenders() {$/;"	f	namespace:sylar	signature:()
warn	log.cc	/^void Logger::warn(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	signature:(LogEvent::ptr event)
warn	log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:slyar::Logger	access:public	signature:(LogEvent::ptr event)
~FormatItem	log.h	/^        virtual ~FormatItem() {}$/;"	f	class:slyar::LogFormatter::FormatItem	access:public	implementation:virtual	signature:()
~LogAppender	log.h	/^    virtual ~LogAppender() {}$/;"	f	class:slyar::LogAppender	access:public	implementation:virtual	signature:()
~LogEventWrap	log.cc	/^LogEventWrap::~LogEventWrap() {$/;"	f	class:sylar::LogEventWrap	signature:()
~LogEventWrap	log.h	/^    ~LogEventWrap();$/;"	p	class:slyar::LogEventWrap	access:public	signature:()
